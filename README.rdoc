= Navigating your tree

To navigate an Ancestry model, use the following methods on any instance / record:

  parent           Returns the parent of the record, nil for a root node
  parent_id        Returns the id of the parent of the record, nil for a root node
  root             Returns the root of the tree the record is in, self for a root node
  root_id          Returns the id of the root of the tree the record is in
  is_root?         Returns true if the record is a root node, false otherwise
  ancestor_ids     Returns a list of ancestor ids, starting with the root id and ending with the parent id
  ancestors        Scopes the model on ancestors of the record
  path_ids         Returns a list the path ids, starting with the root id and ending with the node's own id
  path             Scopes model on path records of the record
  descendants      Scopes the model on direct and indirect children of the record
  descendant_ids   Returns a list of a descendant ids
  subtree          Scopes the model on descendants and itself
  subtree_ids      Returns a list of all ids in the record's subtree
  depth            Return the depth of the node, root nodes are at depth 0

= Sorting

If you just want to sort an array of nodes as if you were traversing them in preorder, you can use the sort_by_structure class method:
  
  TreeNode.sort_by_structure(array_of_nodes)

Note that since materialised path trees don't support ordering within a rank, the order of siblings depends on their order in the original array.